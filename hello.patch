diff -urN -x '*.swp' llvm-src/include/llvm/IR/IntrinsicsSPARC.td llvm-dev/include/llvm/IR/IntrinsicsSPARC.td
--- llvm-src/include/llvm/IR/IntrinsicsSPARC.td	1970-01-01 03:00:00.000000000 +0300
+++ llvm-dev/include/llvm/IR/IntrinsicsSPARC.td	2016-11-12 01:26:59.386666666 +0300
@@ -0,0 +1,5 @@
+let TargetPrefix = "sparc" in {
+  def int_sparc_xmac : Intrinsic<[], [llvm_i32_ty, llvm_i32_ty], []>;
+  def int_sparc_srxacc : Intrinsic<[], [llvm_i32_ty], []>;
+  def int_sparc_lrxacc : Intrinsic<[llvm_i32_ty], [], []>;
+}
diff -urN -x '*.swp' llvm-src/include/llvm/IR/Intrinsics.td llvm-dev/include/llvm/IR/Intrinsics.td
--- llvm-src/include/llvm/IR/Intrinsics.td	2016-07-11 04:28:42.000000000 +0300
+++ llvm-dev/include/llvm/IR/Intrinsics.td	2016-11-12 10:05:49.953333327 +0300
@@ -704,3 +704,4 @@
 include "llvm/IR/IntrinsicsBPF.td"
 include "llvm/IR/IntrinsicsSystemZ.td"
 include "llvm/IR/IntrinsicsWebAssembly.td"
+include "llvm/IR/IntrinsicsSPARC.td"
diff -urN -x '*.swp' llvm-src/lib/Target/Sparc/SparcInstrInfo.td llvm-dev/lib/Target/Sparc/SparcInstrInfo.td
--- llvm-src/lib/Target/Sparc/SparcInstrInfo.td	2016-06-19 14:03:28.000000000 +0300
+++ llvm-dev/lib/Target/Sparc/SparcInstrInfo.td	2016-11-12 10:07:59.669999998 +0300
@@ -1593,6 +1593,31 @@
                    "wrpr $rs1, $simm13, $rd", []>;
 }
 
+// SPARC specific intrinsics
+let DecoderNamespace = "SparkV8" in {
+  let rd = 0, Defs = [XACC] in {
+    let Uses = [XACC] in {
+      def XMAC : F3_1<2, 0b000000,
+                     (outs), (ins IntRegs:$rs1, IntRegs:$rs2),
+                     "xmac $rs1, $rs2",
+                     [(int_sparc_xmac i32:$rs1, i32:$rs2)]>;
+    }
+
+    let rs2 = 0 in {
+      def SRXACC : F3_1<2, 0b000000,
+                       (outs), (ins IntRegs:$rs1),
+                       "srxacc $rs1",
+                       [(int_sparc_srxacc i32:$rs1)]>;
+    }
+  }
+
+  let rs1 = 0, rs2 = 0, Uses = [XACC] in {
+    def LRXACC : F3_1<2, 0b000000,
+                     (outs IntRegs:$rd), (ins),
+                     "lrxacc $rd",
+                     [(set i32:$rd, (int_sparc_lrxacc))]>;
+  }
+}
 //===----------------------------------------------------------------------===//
 // Non-Instruction Patterns
 //===----------------------------------------------------------------------===//
diff -urN -x '*.swp' llvm-src/lib/Target/Sparc/SparcRegisterInfo.td llvm-dev/lib/Target/Sparc/SparcRegisterInfo.td
--- llvm-src/lib/Target/Sparc/SparcRegisterInfo.td	2016-02-27 15:49:59.000000000 +0300
+++ llvm-dev/lib/Target/Sparc/SparcRegisterInfo.td	2016-11-11 02:00:54.806666666 +0300
@@ -157,6 +157,7 @@
 def I5 : Ri<29, "I5">, DwarfRegNum<[29]>;
 def I6 : Ri<30, "FP">, DwarfRegNum<[30]>;
 def I7 : Ri<31, "I7">, DwarfRegNum<[31]>;
+def XACC : Ri<32, "XACC">, DwarfRegNum<[32]>;
 
 // Floating-point registers
 def F0  : Rf< 0,  "F0">, DwarfRegNum<[32]>;
diff -urN -x '*.swp' llvm-src/test/CodeGen/SPARC/intrinsics.ll llvm-dev/test/CodeGen/SPARC/intrinsics.ll
--- llvm-src/test/CodeGen/SPARC/intrinsics.ll	1970-01-01 03:00:00.000000000 +0300
+++ llvm-dev/test/CodeGen/SPARC/intrinsics.ll	2016-11-12 21:41:02.799999990 +0300
@@ -0,0 +1,27 @@
+; RUN: llc < %s -march=sparc | FileCheck %s
+target datalayout = "E-m:e-p:32:32-i64:64-f128:64-n32-S64"
+target triple = "sparc"
+
+; Function Attrs: nounwind
+define void @foo() local_unnamed_addr #0 {
+  ; CHECK-LABEL: foo:
+  ; srxacc
+  ; xmac
+  ; lrxacc
+  tail call void @llvm.sparc.srxacc(i32 0)
+  tail call void @llvm.sparc.xmac(i32 42, i32 42)
+  %1 = tail call i32 @llvm.sparc.lrxacc()
+  ret void
+}
+
+; Function Attrs: nounwind
+declare void @llvm.sparc.srxacc(i32) #1
+
+; Function Attrs: nounwind
+declare void @llvm.sparc.xmac(i32, i32) #1
+
+; Function Attrs: nounwind
+declare i32 @llvm.sparc.lrxacc() #1
+
+attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
+attributes #1 = { nounwind }
diff -urN -x '*.swp' llvm-src/tools/clang/include/clang/Basic/BuiltinsSPARC.def llvm-dev/tools/clang/include/clang/Basic/BuiltinsSPARC.def
--- llvm-src/tools/clang/include/clang/Basic/BuiltinsSPARC.def	1970-01-01 03:00:00.000000000 +0300
+++ llvm-dev/tools/clang/include/clang/Basic/BuiltinsSPARC.def	2016-11-12 06:02:15.269999997 +0300
@@ -0,0 +1,10 @@
+#if defined(BUILTIN) && !defined(LANGBUILTIN)
+#   define LANGBUILTIN(ID, TYPE, ATTRS, BUILTIN_LANG) BUILTIN(ID, TYPE, ATTRS)
+#endif
+
+BUILTIN(__xmac, "vii", "n")
+BUILTIN(__srxacc, "vi", "n")
+BUILTIN(__lrxacc, "i", "n")
+
+#undef BUILTIN
+#undef LANGBUILTIN
diff -urN -x '*.swp' llvm-src/tools/clang/include/clang/Basic/TargetBuiltins.h llvm-dev/tools/clang/include/clang/Basic/TargetBuiltins.h
--- llvm-src/tools/clang/include/clang/Basic/TargetBuiltins.h	2015-09-04 01:51:53.000000000 +0300
+++ llvm-dev/tools/clang/include/clang/Basic/TargetBuiltins.h	2016-11-12 04:27:32.736666666 +0300
@@ -42,6 +42,16 @@
     };
   }
 
+  /// \brief SPARC builtins
+  namespace SPARC {
+    enum {
+      LastTIBuiltin = clang::Builtin::FirstTSBuiltin-1,
+#define BUILTIN(ID, TYPE, ATTRS) BI##ID,
+#include "clang/Basic/BuiltinsSPARC.def"
+      LastTSBuiltin
+    };
+  }
+
   /// \brief AArch64 builtins
   namespace AArch64 {
   enum {
diff -urN -x '*.swp' llvm-src/tools/clang/lib/Basic/Targets.cpp llvm-dev/tools/clang/lib/Basic/Targets.cpp
--- llvm-src/tools/clang/lib/Basic/Targets.cpp	2016-07-25 19:21:28.000000000 +0300
+++ llvm-dev/tools/clang/lib/Basic/Targets.cpp	2016-11-12 09:01:15.443333332 +0300
@@ -6372,6 +6372,7 @@
 class SparcTargetInfo : public TargetInfo {
   static const TargetInfo::GCCRegAlias GCCRegAliases[];
   static const char * const GCCRegNames[];
+  static const Builtin::Info BuiltinInfo[];
   bool SoftFloat;
 public:
   SparcTargetInfo(const llvm::Triple &Triple, const TargetOptions &)
@@ -6413,8 +6414,8 @@
   }
 
   ArrayRef<Builtin::Info> getTargetBuiltins() const override {
-    // FIXME: Implement!
-    return None;
+    return llvm::makeArrayRef(BuiltinInfo,
+      clang::SPARC::LastTSBuiltin - Builtin::FirstTSBuiltin);
   }
   BuiltinVaListKind getBuiltinVaListKind() const override {
     return TargetInfo::VoidPtrBuiltinVaList;
@@ -6547,6 +6548,14 @@
   }
 };
 
+const Builtin::Info SparcTargetInfo::BuiltinInfo[] = {
+#define BUILTIN(ID, TYPE, ATTRS) \
+  { #ID, TYPE, ATTRS, nullptr, ALL_LANGUAGES, nullptr },
+#define LIBBUILTIN(ID, TYPE, ATTRS, HEADER) \
+  { #ID, TYPE, ATTRS, HEADER, ALL_LANGUAGES, nullptr },
+#include "clang/Basic/BuiltinsSPARC.def"
+};
+
 const char * const SparcTargetInfo::GCCRegNames[] = {
   "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
   "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
diff -urN -x '*.swp' llvm-src/tools/clang/lib/CodeGen/CGBuiltin.cpp llvm-dev/tools/clang/lib/CodeGen/CGBuiltin.cpp
--- llvm-src/tools/clang/lib/CodeGen/CGBuiltin.cpp	2016-08-08 19:32:10.000000000 +0300
+++ llvm-dev/tools/clang/lib/CodeGen/CGBuiltin.cpp	2016-11-12 04:48:08.363333332 +0300
@@ -2503,6 +2503,8 @@
   case llvm::Triple::wasm32:
   case llvm::Triple::wasm64:
     return CGF->EmitWebAssemblyBuiltinExpr(BuiltinID, E);
+  case llvm::Triple::sparc:
+    return CGF->EmitSPARCBuiltinExpr(BuiltinID, E);
   default:
     return nullptr;
   }
@@ -3952,6 +3954,28 @@
   return true;
 }
 
+Value *CodeGenFunction::EmitSPARCBuiltinExpr(unsigned BuiltinID,
+                                         const CallExpr *E) {
+  switch (BuiltinID) {
+  default: llvm_unreachable("unexpected builtin");
+  case SPARC::BI__xmac: {
+    Value *src1 = EmitScalarExpr(E->getArg(0));
+    Value *src2 = EmitScalarExpr(E->getArg(1));
+    Value *F = CGM.getIntrinsic(Intrinsic::sparc_xmac);
+    return Builder.CreateCall(F, {src1, src2});
+  }
+  case SPARC::BI__srxacc: {
+    Value *src = EmitScalarExpr(E->getArg(0));
+    Value *F = CGM.getIntrinsic(Intrinsic::sparc_srxacc);
+    return Builder.CreateCall(F, src);
+  }
+  case SPARC::BI__lrxacc: {
+    Value *F = CGM.getIntrinsic(Intrinsic::sparc_lrxacc);
+    return Builder.CreateCall(F);
+  }
+  }
+}
+
 Value *CodeGenFunction::EmitARMBuiltinExpr(unsigned BuiltinID,
                                            const CallExpr *E) {
   if (auto Hint = GetValueForARMHint(BuiltinID))
diff -urN -x '*.swp' llvm-src/tools/clang/lib/CodeGen/CodeGenFunction.h llvm-dev/tools/clang/lib/CodeGen/CodeGenFunction.h
--- llvm-src/tools/clang/lib/CodeGen/CodeGenFunction.h	2016-07-14 05:54:56.000000000 +0300
+++ llvm-dev/tools/clang/lib/CodeGen/CodeGenFunction.h	2016-11-12 04:31:11.686666665 +0300
@@ -2940,6 +2940,7 @@
   llvm::Value *EmitNVPTXBuiltinExpr(unsigned BuiltinID, const CallExpr *E);
   llvm::Value *EmitWebAssemblyBuiltinExpr(unsigned BuiltinID,
                                           const CallExpr *E);
+  llvm::Value *EmitSPARCBuiltinExpr(unsigned BuiltinID, const CallExpr *E);
 
   llvm::Value *EmitObjCProtocolExpr(const ObjCProtocolExpr *E);
   llvm::Value *EmitObjCStringLiteral(const ObjCStringLiteral *E);
diff -urN -x '*.swp' llvm-src/tools/clang/test/CodeGen/sparc-builtins.c llvm-dev/tools/clang/test/CodeGen/sparc-builtins.c
--- llvm-src/tools/clang/test/CodeGen/sparc-builtins.c	1970-01-01 03:00:00.000000000 +0300
+++ llvm-dev/tools/clang/test/CodeGen/sparc-builtins.c	2016-11-12 21:16:27.813333331 +0300
@@ -0,0 +1,12 @@
+// RUN: %clang_cc1 -triple sparc -O3 -S -emit-llvm %s -o - | FileCheck %s
+
+void foo(){
+  int acc = 0;
+  int x = 42, y = 42;
+  // CHECK: call void @llvm.sparc.srxacc(i32 0)
+  __srxacc(acc);  
+  // CHECK: call void @llvm.sparc.xmac(i32 42, i32 42)
+  __xmac(x, y);
+  // CHECK: call i32 @llvm.sparc.lrxacc()
+  acc = __lrxacc();
+}
